#
# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /dummy:
    get:
      description: Dummy Endpoint
      responses:
        200:
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DummyResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /workspace:
    get:
      description: returns all workspaces
      responses:
        200:
          description: workspaces found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workspaceArray'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /logout:
    put:
      description: make user's status logout
      responses:
        200:
          description: log it out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putMessage'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
      put:
        description: update user's thoughts
        requestBody:
          description: write your new message
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/writeMyThoughts'
        responses:
          200:
            description: update my thoughts
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/putMessage'
          default:
            description: Unexpected Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    
  /users/{userId}:
    get:
      description: Return a user's information
      parameters:
        - name: userId
          in: path
          description: the id of user
          required: true
          schema:
            type: integer
      responses:
        200:
          description: get an array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersArray'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
  
  /channels/{workspaceId}:
    get:
      description: Return all channels in this workspace
      parameters:
        - name: workspaceId
          in: path
          description: the id of the workspace
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: get an array of channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsArray'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /privatemessage:
    post:
      description: send a private message to a user in worksapce
      requestBody:
          description: write your private message to your friend
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/writeMyPrivateMessage'
      responses:
        200:
          description: create my private message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateMessage'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /privatemessage/{workspaceId}:
    get:
      description: return all the private message in the workspace
      parameters:
        - name: workspaceId
          in: path
          description: the workspace id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: get all the private messages successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateMessageArray'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /directmessage/{channelID}:
    get:
      description: return all the messages in a channel
      parameters:
        - name: channelID
          in: path
          description: the channel id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: get all the messages in a channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelMessageArray'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: send a new channel message
      parameters:
        - name: channelID
          in: path
          description: the channel id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: write your new message
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeDirectMessage'
      responses:
        200:
          description: message successfully sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelMessage'
        default:
            description: Unexpected Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          

components:
  schemas:
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    privateMessageArray:
      type: array
      items:
        $ref: '#/components/schemas/privateMessage'

    privateMessage:
      type: object
      properties:
        id:
          type: integer
        from_id:
          type: integer
          nullable: true
        to_id:
          type: integer
        workspace_id:
          type: integer
        content:
          type: string
        created:
          type: string
          format: date-time
      required:
        - id
        - from_id
        - to_id
        - workspace_id
        - content
        - created

    ChannelMessageArray:
      type: array
      items:
        $ref: '#/components/schemas/channelMessage'

    channelMessage:
      type: object
      properties:
        id:
          type: integer
          format: int32
        users_id:
          type: integer
          format: int32
        channel_id:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
        content:
          type: string
        parent_id:
          type: integer
          nullable: true
        users_name:
          type: string
        mystatus:
          type: integer
      required:
        - id
        - users_id
        - channel_id
        - created
        - content

    ChannelsArray:
      type: array
      items:
        $ref: '#/components/schemas/channels'

    channels:
      type: object
      properties:
        id:
          type: integer
          format: int32
        channel_name: 
          type: string
        workspace_id:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
      required:
        - id
        - channel_name
        - workspace_id
        - created

    writeMyPrivateMessage:
      type: object
      properties:
        content:
          type: string
        toId:
          type: integer
        workspaceId:
          type: integer
      required:
        - content
        - toId
        - workspaceId

    writeDirectMessage:
      type: object
      properties:
        content:
          type: string
        parent_id:
          type: integer
          nullable: true
      required:
        - content

    workspaceArray:
      type: array
      items:
        $ref: '#/components/schemas/workspace'

    workspace:
      type: object
      properties:
        id:
          type: integer
        workspace_name:
          type: string
        users_name:
          type: string
      required:
        - id
        - workspace_name
        - users_name


    UsersArray:
      type: array
      items:
        $ref: '#/components/schemas/users'

    users:
      type: object
      properties:
        id:
          type: integer
          format: int32
        users_name:
          type: string
        mystatus:
          type: integer
          format: int32
        mythoughts:
          type: string
        email:
          type: string
      required:
        - id
        - users_name
        - mystatus
        - mythoughts
    
    writeMyThoughts:
      type: object
      properties:
        content:
          type: string
      required:
        - content


    DummyResponse:
      required:
        - message
      properties:
        message:
          type: string
    
    putMessage:
      type: object
      properties:
        msg:
          type: string


  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

security:
  - bearerAuth: []         # use the same name as above